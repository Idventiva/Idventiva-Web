
/*------------------------------------*\
    Focus - Idventiva 2020
    PAGINA DE INICIO
\*------------------------------------*/


#wavecanvas {
  opacity: 0.6;
  pointer-events: none;
}

#home {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  overflow: hidden;
  background-color: #000;
  color: $golden;
  text-align: center;
  
  .logo-container {
    position: absolute;
    left: 50%;
    top: 45%;
    transform: translate(-50%, -50%);
    
    img {
      height: 250px;
      animation: pulse 4s cubic-bezier(.07,.4,.69,.98) infinite;
    }
  }

  h2 {
    font-weight: light;
  }
  
  p {
    color: $lightgray;
  }

  
  .home-background {
    position: absolute;
    top:0;
    left:0;
    right:0;
    bottom:0;
    transform: translateZ(-100px);
    transform-style: preserve-3d;
    pointer-events: none;
    opacity: 1;
    z-index: 0;
    
    .background-image {
      position: absolute;
      height: 100%;
      width: 100%;
      background-image: url(img/backgrounds/moss.jpg);
      background-repeat: repeat-x;
      background-size: cover;
      background-position: left;
      opacity: 0.3;
      pointer-events: none;
    }
  }
  .logix {
    z-index: 1;
    width: auto;
    position: absolute;
    top: 80%;
    left: 50%;
    transform: translate(-50%, -50%);
  

    button {
      margin-top: 40px;
      border-radius: 40px;
    }
  }
}



// best in chrome
$total: 500; // total particles
$orb-size: 280px;
$particle-size: 3px;
$time: 12s; 
$base-hue: 34; // change for diff colors (180 is nice)

.wrap {
  position: relative;
  top: 42%;
  left: 50%;
  width: 1px; 
  height: 1px; 
  transform-style: preserve-3d;
  perspective: 3200px;
  animation: rotate $time infinite linear; // rotate orb
}

@keyframes rotate {
  100% {
    transform: rotateY(360deg) rotateX(360deg);
  }
}

.c {
  position: absolute;
  width: $particle-size;
  height: $particle-size;
  border-radius: 50%;
  opacity: 0; 
}

@for $i from 1 through $total {
  $z: (random(360) * 1deg); // random angle to rotateZ
  $y: (random(360) * 1deg); // random to rotateX
  $hue: ((40/$total * $i) + $base-hue); // set hue
  
  .c:nth-child(#{$i}){ // grab the nth particle
    animation: orbit#{$i} $time infinite;
    animation-delay: ($i * .01s); 
    background-color: hsla($hue, 100%, 90%, 0.3);
  }

  @keyframes orbit#{$i}{ 
    20% {
      opacity: 1; // fade in
    }
    30% {
      transform: rotateZ(-$z) rotateY($y) translateX($orb-size) rotateZ($z); // form orb
    }
    80% {
      transform: rotateZ(-$z) rotateY($y) translateX($orb-size) rotateZ($z); // hold orb state 30-80
      opacity: 1; // hold opacity 20-80
    }
    100% {
       transform: rotateZ(-$z) rotateY($y) translateX( ($orb-size * 2) ) rotateZ($z); // translateX * 3
       opacity: 1;
    }
  }
}

@keyframes pulse {
   0% {
     transform: scale(0.95), rotateZ(0deg);
     opacity: 0.5;
   }
   50% {
    transform: scale(1), rotateZ(180deg);
    opacity: 0.8;
   }
   100% {
    transform: scale(0.95), rotateZ(0deg);
    opacity: 0.5;
   }
}

@mixin glitchCopy { 
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.glitch {
position: relative;
/* Animation provies a slight random skew. Check bottom of doc
for more information on how to random skew. */
animation: glitch-skew 1s infinite linear alternate-reverse;

// Creates a copy before our text. 
&::before{
  // Duplicates our text with the mixin.
  @include glitchCopy;
  // Scoots text slightly to the left for the color offset.
  left: 2px;
  // Creates the color 'shadow' that happens on the glitch.
  text-shadow: -2px 0 #ff9100;
  /* Creates an initial clip for our glitch. This works in
  a typical top,right,bottom,left fashion and creates a mask
  to only show a certain part of the glitch at a time. */
  clip: rect(44px, 450px, 56px, 0);
  /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
  with an alternating animation to keep things fresh. */
  animation: glitch-anim 5s infinite linear alternate-reverse;
}

// Creates a copy after our text. Note comments from ::before.
&::after {
  @include glitchCopy;
  left: -2px;
  text-shadow: -2px 0 #a79b76, 2px 2px #2c2c2c;
  animation: glitch-anim2 1s infinite linear alternate-reverse;
}
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
$steps: 20;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    clip: rect(random(100)+px, 9999px, random(100)+px, 0);
    transform: skew((random(100) / 100) + deg);
  }
}
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
$steps: 20;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    clip: rect(random(100)+px, 9999px, random(100)+px, 0);
    transform: skew((random(100) / 100) + deg);
  }
}
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
$steps: 10;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    transform: skew((random(10) - 5) + deg);
  }
}
}